@model PreferencesViewModel

<div class="row" id="row1">

    <!--<a class="waves-effect waves-light btn modal-trigger" style="position: fixed; right: 20px; bottom: 10px" href="#modal1">Lista miejsc</a>

    <!-- Modal Structure -->
    <div id="modal1" class="modal bottom-sheet">
        <div class="modal-content">
            <h5>Lista miejsc</h5>
            <ul class="collection" id="listOfPlaces">
            </ul>
            
        </div>
        <!--<div class="modal-footer">
            <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat" style="position:absolute">Agree</a>
        </div>-->
        </div>

    <div class="col s2">
        <form asp-controller="TripMap" asp-action="#" method="post" role="form">
            <br /> <!-- Prowizorka -->
            <div class="input-field col s12">
                <i class="material-icons prefix">room</i>
                <input asp-for="City" id="city_poc" type="text" class="validate">
                <label asp-for="City" for="city_poc"></label>
            </div>
            <div class="col s12">
                <i class="tiny material-icons prefix">today</i>
                <label asp-for="BeginTrip" for="start_date"></label>
                <input asp-for="BeginTrip" type="date" id="start_date" class="datepicker">
                <br />
                <i class="tiny material-icons prefix">today</i>
                <label asp-for="EndTrip" for="end_date"></label>
                <input asp-for="EndTrip" type="date" id="end_date" class="datepicker">
            </div>

            <ul class="collection with-header">
                <li class="collection-header" style="font-size: small; color: #0d47a1;">Zwiedzanie</li>
                <li class="collection-item">
                    <input value="true" class="filled-in" asp-checkbox-for="Monuments"/>
                    <br />
                    <input value="true" class="filled-in" asp-checkbox-for="Museum" />

                </li>    
            </ul>
            <ul class="collection with-header">
                <li class="collection-header" style="font-size: small; color: #0d47a1;">Rozrywka</li>
                <li class="collection-item">
                    <input value="true" class="filled-in" asp-checkbox-for="Club" />
                    <br />
                    <input value="true" class="filled-in" asp-checkbox-for="Cinema" />
                </li>
            </ul>
            <ul class="collection with-header">
                <li class="collection-header" style="font-size: small; color: #0d47a1;">Inne</li>
                <li class="collection-item">
                    <input value="true" class="filled-in" asp-checkbox-for="Food" />
                </li>
            </ul>

        </form>
        <div class="col s2">
            <button class="waves-effect waves-light btn" onclick="generateTripRoute();">Generuj trasę</button>
        </div>
    </div>
    <div class="col s10">
        <div id="map" style="min-height: 500px; min-height: 800px"></div>
    </div>
</div>  

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?v=3.22&libraries=places,maps"></script>
    <script>
        var map = null;
        var infowindow = null;
        var trip = {};
        var selectedPlaceTypes = [];
        var markers = [];
        var placeService;
        var autocompleteCities;
        var specMarkers = [];
        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var labelIndex = 0;
        var placeR = 400;
        var listButton = null;

        function addPlaceToTrip(place)
        {
            alert("elo");

        }

        function showOptions(event)
        {
            var marker = new google.maps.Marker({
                position: event.latLng,
                map: map
            });
            //ustawione tylko na chwile, jak masz chwile to weźże skasuj tego markera człowieku kappa keepo kappaClaus
            marker.setVisible(false);
            /*
            According to Info Windows Guidelines,
                You are advised not to place interactive components — such as buttons, checkboxes, or text inputs — 
                within your custom info window.
            -> czyli trochę kappa z takim buttonem
            -> wiemy, wiemy ale poki co olac to :D*/
            
            var content = document.createElement('div');

            var restaurant = content.appendChild(document.createElement('button'));
            restaurant.innerHTML = 'Odwiedź restauracje';
            restaurant.className = 'waves-effect waves-light btn';
            restaurant.onclick = function () {
                findClosestRestaurants(event)
            };

            var atm = content.appendChild(document.createElement('button'));
            atm.innerHTML = 'Znajdź bankomat';
            atm.className = 'waves-effect waves-light btn';
            atm.onclick = function () {
                findClosestAtm(event);
            }

            if (infowindow != null) {
                infowindow.close();
            } else {
                infowindow = new google.maps.InfoWindow();
            }
            infowindow.setContent(content);
            infowindow.open(map, marker);
        }

        function loadMapAndPlaceService()
        {
            var mapCanvas = document.getElementById('map');
            var mapOptions = {
                center: new google.maps.LatLng(50.0468548, 19.9348337),
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(mapCanvas, mapOptions);

            placeService = new google.maps.places.PlacesService(map);
        }

        function setupCitiesAutocomplete()
        {
            var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(-90, -180),
                new google.maps.LatLng(90, 180));

            var autocompleteOptions = {
                bounds: defaultBounds,
                types: ['(cities)']
            };

            autocompleteCities = new google.maps.places.Autocomplete(document.getElementById('city_poc'), autocompleteOptions);
            google.maps.event.addListener(autocompleteCities, 'place_changed', function () {
                var place = autocompleteCities.getPlace();
                map.panTo(place.geometry.location);
            });
        }

        /*
        mozliwe, ze to zrobimy jakos sprytniej ale poki co moze to tak dzialac
        */
        function setupCheckboxListener()
        {
            $(':checkbox').change(function () {
                var placeMap = {
                    'Monuments': ['city_hall', 'museum', 'point_of_interest'],
                    'Museum': [],
                    'Club': ['bar', 'cafe'],
                    'Food': ['restaurant', 'meal_takeaway'],
                    //'Art': ['art_gallery'],
                    'Cinema': ['movie_theater'],
                    //'Fun': ['amusement_park', 'zoo']
                };

                selectedPlaceTypes = [];
                $(':checkbox').each(function () {
                    if (this.checked) {
                        selectedPlaceTypes = selectedPlaceTypes.concat(placeMap[this.id]);
                    }
                });

                for (var i = 0; i < markers.length; ++i) {
                    markers[i].setMap(null);
                    delete markers[i];
                }
                markers = [];


                var parent = document.getElementById("listOfPlaces");

                var numberOfChilds = document.getElementById("listOfPlaces").children.length;

                for (var i = 0; i < numberOfChilds; ++i)
                {
                    parent.removeChild(parent.childNodes[0]);
                    
                }

                if (listButton != null && selectedPlaceTypes.length == 0) {
                    document.getElementById("listButton").remove();
                    listButton = null;
                }

                if (selectedPlaceTypes.length == 0) {
                    return;
                }
                if (listButton == null) {
                    listButton = document.createElement('a');
                    document.getElementById("row1").appendChild(listButton);
                    listButton.id = 'listButton';
                    listButton.className = 'waves-effect waves-light btn modal-trigger';
                    listButton.style.position = 'fixed';
                    listButton.style.right = '20px';
                    listButton.style.bottom = '10px';
                    listButton.href = '#modal1';
                    listButton.innerHTML = 'Lista miejsc';
                    listButton.onclick = function () {
                        $('#modal1').openModal({ opacity: 0 });
                    }
                }


                

                placeService.nearbySearch({
                    location: autocompleteCities.getPlace().geometry.location,
                    radius: 5000,
                    types: selectedPlaceTypes
                }, function (results, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        var places = results;
                        for (var i = 0; i < places.length; i++) {
                            placeDetailInfo(places[i]);
                        }
                    }
                });

            });

        }

        function placeDetailInfo(place) {
            var marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location,
            });

            markers.push(marker);
            
            var request = { reference: place.reference };
            placeService.getDetails(request, function (placeDetails, status) {
                details = placeDetails;
 
                var button = document.createElement('a');
                var label = document.createElement('label')
                var icon = document.createElement('i');
                var photos = place.photos;
                var photoURL = photos[0].getUrl({ 'maxWidth': 100, 'maxHeight': 100 });

                if (details.name != null) {
                    var placeItem = document.createElement('li');
                    placeItem.className = 'collection-item avatar';
                    document.getElementById("listOfPlaces").appendChild(placeItem);
                    placeItem.style.fontSize = '12px';

                    var placeAvatar = document.createElement('img');
                    placeAvatar.className = 'circle';
                    placeItem.appendChild(placeAvatar);

                    var placeName = document.createElement('span');
                    placeName.className = 'title';
                    placeItem.appendChild(placeName);

                    var placeData = document.createElement('p');
                    placeItem.appendChild(placeData);

                    var button_list = document.createElement('a');

                    var icon_list = document.createElement('i');

                    placeItem.appendChild(button_list);
                    button_list.appendChild(icon_list);
                    icon_list.className = 'material-icons';

                    placeName.innerHTML = '<b>'+details.name+'</b>';
                    placeAvatar.src = photoURL;
                    placeData.innerHTML = details.formatted_address + "<br />" +
                                details.formatted_phone_number + "<br />" +
                                "<a href=" + details.website + ">" + details.website + "</a><br />" +
                                "Ocena: <span style=color:#01579b;>" + details.rating + "</span>";



                    if (trip[place.geometry.location] != undefined) {
                        icon_list.innerHTML = 'done';
                        button_list.className = "secondary-content btn-floating waves-effect waves-light green"
                
                        //label.innerHTML = ' Dodano do trasy';
                    } else {
                        icon_list.innerHTML = 'add';
                        button_list.className = "secondary-content btn-floating waves-effect waves-light green"

                google.maps.event.addListener(marker, 'click', function () {
                    if (infowindow != null) {
                        infowindow.close();
                    }
                }


                button_list.onclick = function () {
                    button_list.className = 'secondary-content btn-floating waves-effect waves-light green';
                    if (trip[place.geometry.location] != undefined) {

                        delete trip[place.geometry.location];
                        icon_list.innerHTML = 'add';
                        //label.innerHTML = ' Dodaj do trasy';
                    } else {

                        trip[place.geometry.location] = marker;
                        icon_list.innerHTML = 'done';
                        //label.innerHTML = ' Dodano do trasy';
                    }
                }

                $(button_list).mouseenter(function () {
                    if (trip[place.geometry.location] != undefined) {
                        button_list.className = 'secondary-content btn-floating waves-effect waves-light red';
                        icon_list.innerHTML = 'delete';
                        //label.innerHTML = ' Usuń z trasy';
                    }
                });

                $(button_list).mouseleave(function () {
                    button_list.className = 'secondary-content btn-floating waves-effect waves-light green';

                    if (trip[place.geometry.location] != undefined) {
                        icon_list.innerHTML = 'done';
                        //label.innerHTML = ' Dodano do trasy';
                    } else {
                        icon_list.innerHTML = 'add';
                        //label.innerHTML = ' Dodaj do trasy';
                    }
                });

                google.maps.event.addListener(marker, 'click', function () {
                    if (infowindows.length > 0) {
                        infowindows.pop().close();
                    }

                    var content = document.createElement('div');
                    photos = place.photos;
                    if (!photos) {
                        content.innerHTML = "<strong>" + details.name + "</strong>" + "<br />" +
                            details.formatted_address + "<br />" +
                            details.formatted_phone_number + "<br />" +
                            "<a href=" + details.website + ">" + details.website + "</a><br />" +
                            "Ocena: <span style=color:#01579b;>" + details.rating + "</span><br /><br />";
                    } else {
                        var photoURL = photos[0].getUrl({ 'maxWidth': 1200, 'maxHeight': 700 });
                        content.innerHTML = "<strong>" + details.name + "</strong>" + "<br />" +
                                    details.formatted_address + "<br />" +
                                    details.formatted_phone_number + "<br />" +
                                    "<a href=" + details.website + ">" + details.website + "</a><br />" +
                                    "<img width=\"240\" src=" + photoURL + "><br />" +
                                    "Ocena: <span style=color:#01579b;>" + details.rating + "</span><br /><br />";
                    }
                    

                    infowindow = new google.maps.InfoWindow({ content: content, maxWidth: 240 });
                    infowindow.open(map, this);

                    content.appendChild(button);
                    button.className = 'btn-floating waves-effect waves-light green';

                    content.appendChild(label);
                    label.style.fontSize = "16px";

                    
                    button.appendChild(icon);
                    icon.className = 'material-icons';

                    if (trip[place.geometry.location] != undefined) {
                        icon.innerHTML = 'done';
                        label.innerHTML = ' Dodano do trasy';
                    } else {
                        icon.innerHTML = 'add';
                        label.innerHTML = ' Dodaj do trasy';
                    }

                    button.onclick = function () {
                        button.className = 'btn-floating waves-effect waves-light green';
                        if (trip[place.geometry.location] != undefined) {

                            delete trip[place.geometry.location];
                            icon.innerHTML = 'add';
                            label.innerHTML = ' Dodaj do trasy';
                        } else {

                            trip[place.geometry.location] = marker;
                            icon.innerHTML = 'done';
                            label.innerHTML = ' Dodano do trasy';
                        }
                    }

                    $(button).mouseenter(function () {
                        if (trip[place.geometry.location] != undefined) {
                            button.className = 'btn-floating waves-effect waves-light red';
                            icon.innerHTML = 'delete';
                            label.innerHTML = ' Usuń z trasy';
                        }
                    });

                    $(button).mouseleave(function () {
                        button.className = 'btn-floating waves-effect waves-light green';

                        if (trip[place.geometry.location] != undefined) {
                            icon.innerHTML = 'done';
                            label.innerHTML = ' Dodano do trasy';
                        } else {
                            icon.innerHTML = 'add';
                            label.innerHTML = ' Dodaj do trasy';
                        }
                    });
                });
            });
        }

        function delMarkers()
        {
            for (var i = 0; i < specMarkers.length; ++i) {
                specMarkers[i].setMap(null);
                delete specMarkers[i];
            }
            specMarkers = [];
        }


        function addPlace(place) 
        {

            var placeLoc = place.geometry.location;
            var marker = new google.maps.Marker({
                map: map,
                position: placeLoc,
                label: labels[labelIndex++ % labels.length]
                });

            specMarkers.push(marker);
            google.maps.event.addListener(marker, 'click', function () {
                if (infowindow != null) {
                    infowindow.close();
                } else {
                    infowindow = new google.maps.InfoWindow();
                }

                infowindow.setContent(place.name);
                infowindow.open(map, this);
                trip[placeLoc] = marker;
            });

        }


        function findClosestRestaurants(event)
        {
            delMarkers();
            var request = {
                location: event.latLng,
                radius: placeR,
                types: ['restaurant']
            };
           

            placeService.nearbySearch(request, function (results, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    for (var i = 0; i < results.length; i++) {
                        addPlace(results[i]);
                    }
                }
            });

            infowindow.close();
        }


        function findClosestAtm(event)
        {
            delMarkers();
            var request = {
                location: event.latLng,
                radius: placeR,
                types: ['atm']
            };
            
            placeService.nearbySearch(request, function (results, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    for (var i = 0; i < results.length; i++) {
                        addPlace(results[i]);
                    }
                }
            });

            infowindow.close();
        }



        function generateTripRoute()
        {
            /*
            TODO: grzesiek twoja funkcja :D (nie ma to jak pisac do samego siebie)
            */

        }


        /*
        Main loading
        */
        google.maps.event.addDomListener(window, 'load', function () {
            loadMapAndPlaceService();

            setupCitiesAutocomplete();

            google.maps.event.addListener(map, "rightclick", showOptions);

            setupCheckboxListener();


            //var markers = [];
            //var directions = new google.maps.DirectionsService();
            //var directionsDisplay = new google.maps.DirectionsRenderer({ map: map });
            //$(':checkbox').change(function () {
            //    var placeMap = {
            //        'Monuments': ['city_hall', 'museum', 'point_of_interest'],
            //        'Club': ['bar', 'cafe'],
            //        'Food': ['restaurant', 'meal_takeaway'],
            //        //'Art': ['art_gallery'],
            //        'Cinema': ['movie_theater'],
            //        //'Fun': ['amusement_park', 'zoo']
            //    };

            //    var currentSearch = [];
            //    $(':checkbox').each(function () {
            //        if (this.checked) {
            //            currentSearch = currentSearch.concat(placeMap[this.id]);
            //        }
            //    });

            //    for (var i = 0; i < markers.length; ++i) {
            //        markers[i].setMap(null);
            //        delete markers[i];
            //    }

            //    markers = [];

            //    directionsDisplay.setMap(null);
            //    directionsDisplay.setDirections(null);

            //    if (currentSearch.length == 0) {
            //        return;
            //    }

            //    infowindow = new google.maps.InfoWindow();
            //    service = new google.maps.places.PlacesService(map);

            //    service.nearbySearch({
            //        location: autocomplete.getPlace().geometry.location,
            //        radius: 2500,
            //        types: currentSearch
            //    }, callback);

            //    function callback(results, status) {
            //        if (status === google.maps.places.PlacesServiceStatus.OK) {
            //            var places = results.filter(function (place) {
            //                return place.rating > 4.0;
            //            }).sort(function (a, b) {
            //                return a.rating < b.rating;
            //            }).slice(0, 8);
            //            for (var i = 0; i < places.length; i++) {
            //                placeDetailInfo(places[i]);
            //            }
            //            var waypoints = places.map(function (item) {
            //                return {
            //                    location: item.geometry.location.toUrlValue(),
            //                    stopover: true
            //                };
            //            });

            //            directions.route({
            //                origin: waypoints[0]['location'],
            //                destination: waypoints[waypoints.length - 1]['location'],
            //                waypoints: waypoints.slice(1, waypoints.length - 1),
            //                optimizeWaypoints: true,
            //                travelMode: google.maps.TravelMode.WALKING
            //            }, function (response, status) {
            //                if (status == google.maps.DirectionsStatus.OK) {
            //                    directionsDisplay.setMap(map);
            //                    directionsDisplay.setDirections(response);
            //                }
            //            });
            //        }
            //    }
                
            //});
        });



        @*google.maps.event.addDomListener(window, 'load', function () {
            var mapCanvas = document.getElementById('map');
            var mapOptions = {
                center: new google.maps.LatLng(50.0468548, 19.9348337),
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var map = new google.maps.Map(mapCanvas, mapOptions);

            var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(-90, -180),
                new google.maps.LatLng(90, 180));

            var autocompleteOptions = {
                bounds: defaultBounds,
                types: ['(cities)']
            };

            var autocomplete = new google.maps.places.Autocomplete(document.getElementById('city_poc'), autocompleteOptions);
            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                var place = autocomplete.getPlace();
                map.panTo(place.geometry.location);
            });

            var markers = [];

            var directions = new google.maps.DirectionsService();
            var directionsDisplay = new google.maps.DirectionsRenderer({ map: map });

            $(':checkbox').change(function () {
                var placeMap = {
                    'Monuments': ['city_hall', 'museum', 'point_of_interest'],
                    'Club': ['bar', 'cafe'],
                    'Food': ['restaurant', 'meal_takeaway'],
                    'Art': ['art_gallery'],
                    'Cinema': ['movie_theater'],
                    'Fun': ['amusement_park', 'zoo']
                };

                var currentSearch = [];
                $(':checkbox').each(function () {
                    if (this.checked) {
                        currentSearch = currentSearch.concat(placeMap[this.id]);
                    }
                });

                for (var i = 0; i < markers.length; ++i) {
                    markers[i].setMap(null);
                    delete markers[i];
                }

                markers = [];

                directionsDisplay.setMap(null);
                directionsDisplay.setDirections(null);

                if (currentSearch.length == 0) {
                    return;
                }

                var infowindow = new google.maps.InfoWindow();
                var service = new google.maps.places.PlacesService(map);

                service.nearbySearch({
                    location: autocomplete.getPlace().geometry.location,
                    radius: 2500,
                    types: currentSearch
                }, function (results, status) {
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        var places = results.filter(function (place) {
                            return place.rating > 4.0;
                        }).sort(function (a, b) {
                            return a.rating < b.rating;
                        }).slice(0, 8);

                        for (var i = 0; i < places.length; ++i) {
                            var place = places[i];
                            var marker = new google.maps.Marker({
                                map: map,
                                position: place.geometry.location
                            });

                            markers.push(marker);

                            google.maps.event.addListener(marker, 'click', function () {
                                infowindow.setContent(place.name);
                                infowindow.open(map, this);
                            });
                        }

                        var waypoints = places.map(function (item) {
                            return {
                                location: item.geometry.location.toUrlValue(),
                                stopover: true
                            };
                        });

                        directions.route({
                            origin: waypoints[0]['location'],
                            destination: waypoints[waypoints.length-1]['location'],
                            waypoints: waypoints.slice(1, waypoints.length - 1),
                            optimizeWaypoints: true,
                            travelMode: google.maps.TravelMode.WALKING
                        }, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                directionsDisplay.setMap(map);
                                directionsDisplay.setDirections(response);
                            }
                        });
                    }
                });
            });
        });*@
        

        $('.datepicker').pickadate({
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 2, // Creates a dropdown of 15 years to control year
            monthsFull: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            monthsShort: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            weekdaysFull: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
            weekdaysShort: ['Niedz.', 'Pon.', 'Wt.', 'Śr', 'Czw.', 'Pt.', 'Sob.'],
            today: 'Dziś',
            clear: 'Wyczyść',
            close: 'Zamknij',
            labelMonthNext: 'Następny miesiąc',
            labelMonthPrev: 'Poprzedni miesiąc',
            labelMonthSelect: 'Wybierz miesiąc',
            labelYearSelect: 'Wybierz rok',
        });
    </script>
}